<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	xmlns:layout="tj.ttu.components.components.layout.*" 
	xmlns:grid="tj.ttu.components.renderers.grid.*" 
	alpha.disabled="0.5"
	minWidth="300" minHeight="120" xmlns:scroller="tj.ttu.components.components.scroller.*" 
	>
	
	<fx:Metadata>
		<![CDATA[
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		@langversion 3.0
		@playerversion Flash 10
		@playerversion AIR 1.5
		@productversion Flex 4
		*/
		[HostComponent("spark.components.DataGrid")]
		]]>
	</fx:Metadata>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	
	<fx:Declarations>
		<!--- @private -->        
		<fx:Component id="rowBackground">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							this.alpha = dataGrid.dataProvider && dataGrid.dataProvider.length > rowIndex ? 1 : 0;
						}
					]]>
				</fx:Script>  
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#C0CDD5"
										 alpha="1.0" ratio="0"/>
						<s:GradientEntry color="#ADBEC8"
										 alpha="1.0" ratio="1"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->        
		<fx:Component id="caretIndicator">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("caretColor");
							caretIndicatorFill.color = color;
						}
					]]>
				</fx:Script>
				
				<s:stroke>
					<!--- @private -->
					<s:SolidColorStroke id="caretIndicatorFill" color="0x0167FF" weight="0" alpha="0"/>
				</s:stroke>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="columnSeparator">
			<s:Line>
				<s:stroke>
					<s:SolidColorStroke color="0xa4a4a4" weight="0" caps="none" alpha="0"/>
				</s:stroke>
			</s:Line>
		</fx:Component>
		
		<!--- Defines the value of the columnSeparator property for the columnHeaderGroup. -->
		<fx:Component id="headerColumnSeparator">
			<s:Line>
				<s:stroke>
					<s:SolidColorStroke color="0x364b60" weight="1" caps="none" alpha="0"/>
				</s:stroke>
			</s:Line>
		</fx:Component>
		
		<!--- Defines the value of the headerRenderer property for the columnHeaderGroup. 
		The default is spark.skins.spark.DefaultGridHeaderRenderer -->
		<fx:Component id="headerRenderer">
			
			<grid:GridHeaderRenderer />
			
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="hoverIndicator">
			<s:Rect>
				<s:fill>
					<!--- @private -->
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#c1ced6"
										 alpha="1.0" ratio="0"/>
						<s:GradientEntry color="#9cadba"
										 alpha="1.0" ratio="1"/>
					</s:LinearGradient>					
				</s:fill>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="rowSeparator">
			<s:Line implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							this.alpha = dataGrid.dataProvider && dataGrid.dataProvider.length > rowIndex ? 1 : 0;
						}
					]]>
				</fx:Script>
				<s:stroke>
					<s:SolidColorStroke caps="none" color="#d7e3f1" joints="miter" miterLimit="4" weight=".5"
										/>
				</s:stroke>
			</s:Line>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="selectionIndicator">
			<s:Rect>
				<s:fill>
					<!--- @private -->
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#C0CDD5"
										 alpha="1.0" ratio="0"/>
						<s:GradientEntry color="#ADBEC8"
										 alpha="1.0" ratio="1"/>
					</s:LinearGradient>
				</s:fill>                
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="editorIndicator">
			<s:Rect alpha="0">
				<s:fill>
					<s:SolidColor color="0xFFFFFF"/>
				</s:fill>                
			</s:Rect>
		</fx:Component>                    
		
	</fx:Declarations>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == true)
				{
					border.visible = true;
					background.left = background.top = background.right = background.bottom = 1;
				}
				else
				{
					border.visible = false;
					background.left = background.top = background.right = background.bottom = 0;
				}
				
				borderStroke.color = getStyle("borderColor");
				borderStroke.alpha = getStyle("borderAlpha");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
		]]>
	</fx:Script>
	
	<!-- column header, content -->
	<s:VGroup horizontalAlign="justify" gap="0" left="0" right="0" top="0" bottom="0">
		
		<!--- @private -->
		<s:Group width="100%" height="22" >
			<s:GridColumnHeaderGroup id="columnHeaderGroup"
									 paddingLeft="1" paddingTop="1" paddingRight="1" 
									 left="0" right="0"
									 height="100%"
									 minHeight="21"
									 columnSeparator="{headerColumnSeparator}"
									 headerRenderer="{headerRenderer}"
									 />
		</s:Group>
		<s:Group height="100%">
			
			<!--- @private -->
			<s:Rect id="background" left="1" right="1" top="1" bottom="1">
				<s:fill>
					<!--- Defines the color of the background. The default color is 0xFFFFFF. -->
					<s:SolidColor id="bgFill" color="0x80909c" />
				</s:fill>
			</s:Rect>
			
			<!-- header separator, scroller and grid -->
			<s:Group height="100%" width="100%" >
				<!--- @private -->
				<s:Line id="headerSeparator" visible="false">
					<s:stroke>
						<s:SolidColorStroke color="0xa4a4a4" weight="0" caps="none"/>
					</s:stroke>
				</s:Line>        
				
				<scroller:TTUScroller id="scroller"
							measuredSizeIncludesScrollBars="true"
							minViewportInset="1" 
							hasFocusableChildren="false" 
							height="100%"
							left="0" right="0" bottom="0" top="0"
							>
					
					<!--- @private -->
					<s:Grid id="grid" 
							top="1" left="2" right="2" bottom="2"
							itemRenderer="spark.skins.spark.DefaultGridItemRenderer" 
							>
						<s:gridView>
							<fx:Component>
								<s:GridView>
									<s:GridLayer name="backgroundLayer"/>
									<s:GridLayer name="selectionLayer"/>
									<s:GridLayer name="editorIndicatorLayer"/>                            
									<s:GridLayer name="rendererLayer"/>
									<s:GridLayer name="overlayLayer"/>
								</s:GridView>
							</fx:Component>
						</s:gridView>
					</s:Grid>                   
				</scroller:TTUScroller>
			</s:Group>
			
		</s:Group>
		
	</s:VGroup>
	
	<!-- border -->
	<!--- @private -->
	<s:Rect left="0" right="0" top="0" bottom="0" id="border">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" weight="0" alpha="0"/>
		</s:stroke>
	</s:Rect>    
	
</s:SparkSkin>